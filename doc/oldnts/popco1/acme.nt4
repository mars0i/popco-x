acme.nt4

match propns.  need this in itself, and  since it tells what components
to match.  also, need pos links between mappings associated due to
coming from same pair of propns.

the negative-link stage ignores propn-families, though.

we also need a list of all map-pairs, without regard to propn-family,
since those are the nodes that will be linked via one or two matrices.
but if we're making links using the matrix, then we *first* need this
list.  And each element in it should be unique.

once this list is created, we can create a matrix with it as the two
dimensions.  at that point we can go through the two processes: pos-link
members of propn families, and neg-link mappings that share sides.

however, this requires that duplicate pairings are preserved, so that
weights can be summed.  e.g. if obj1=obj2 in two propns, then the
neg-link from obj1=ojb2 to obj1=obj3 will be twice as large as it would
have been. (?)  And I think that propn1=propn2 might get extra weight to
its components if it's an argument of another propn.

How about we do first step of component mappings *preserving* family-lists.
Then that can be used later when filling the matrix.

We can have a separate step to squash the family distinctions and unique
the list in order to create the node vector.

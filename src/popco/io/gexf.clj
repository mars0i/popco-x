(ns popco.io.gexf
  (:require [clojure.data.xml :as x]
            [clojure.core.matrix :as mx]))

(def as-elem x/sexp-as-element) ; convenience abbreviation

; The xml declaration will be generated by emit and its cousins. i.e. <?xml version=\"1.0\" encoding=\"UTF-8\"?>")

(def node-size-multiplier 50)

(defn gexf-graph
  [nodes edges]
  (as-elem [:gexf {:xmlns "http://www.gexf.net/1.2draft"
                   :xmlns:viz "http://www.gexf.net/1.1draft/viz"
                   :xmlns:xsi "http://www.w3.org/2001/XMLSchema-instance"
                   :xsi:schemaLocation "http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd"
                   :version "1.2"}
            [:graph {:defaultedgetype "undirected" :mode "static"} 
	            [:attributes {:class "node"}
		                 [:attribute {:id "activn" :title "activation" :type "float"}
				             [:default {} "0.0"]]]
                    [:nodes {} nodes]
                    [:edges {} edges]]]))

(defn node
 "id should be a string. It will also be used as label. 
 activn is a POPCO activation value."
 [id activn]
 (let [color (cond (pos? activn) {:r "255" :g "255" :b "0"} ; yellow
	      (neg? activn) {:r "0" :g "0" :b "255"}
	      :else {:r "128" :g "128" :b "128"})]
  [:node {:id id :label id} 
         [:attvalues {} [:attvalue {:for "activn" :value (str activn)}]]
	 [:viz:color color]
	 [:viz:size {:value (str (* node-size-multiplier (mx/abs activn)))}] ] ))

(defn edge
  "node1-id and node2-id are strings.  edge-weight should be 
  a number that will determine the edge thickness.  It's
  a function of the popco link weight, but is not the same thing."
  [node1-id node2-id edge-weight]
  (let [wt-str (str (* 50 (mx/abs edge-weight)))      ; TODO multiplication of weight is just for testing. delete it later?
        color (cond (pos? edge-weight) {:r "0" :g "255" :b "0"}
                    (neg? edge-weight) {:r "255" :g "0" :b "0"}
                    :else {:r "0" :g "0" :b "0"})]
    [:edge {:id (str node1-id "::" node2-id)
            :source node1-id
            :target node2-id
            :weight wt-str}
     [:viz:thickness {:value wt-str}] ; IGNORED, APPARENTLY
     [:viz:color color]]))

;; IMPORTANT: During import into Gephi, uncheck "auto-scale".  Otherwise it does funny things with node sizes.
(defn gexf-test []
 (gexf-graph
  (list             ; can't be a vector--vectors aren't seqs
   (node "A" 1.0)
   (node "B" 0.25)
   (node "C" -0.5))
  (list
   (edge "A" "B" -2.0)
   (edge "A" "C" 1.0)
   (edge "C" "B" 4.0))))


;(defn nodes
;  [& body]
;  [:nodes {} body])
;
;(defn edges
;  [& body]
;  [:edges {} body])

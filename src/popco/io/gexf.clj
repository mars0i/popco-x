(ns popco.io.gexf
  (:require [clojure.data.xml :as x]))

(def as-elem x/sexp-as-element) ; convenience abbreviation

; The xml declaration will be generated by emit and its cousins. i.e. <?xml version=\"1.0\" encoding=\"UTF-8\"?>")

(defn gexf-graph
  [& body]
  (as-elem [:gexf {:xmlns "http://www.gexf.net/1.2draft"
                   :xmlns:viz "http://www.gexf.net/1.1draft/viz"
                   :xmlns:xsi "http://www.w3.org/2001/XMLSchema-instance"
                   :xsi:schemaLocation "http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd"
                   :version "1.2"}
            [:graph {} body]]))

(defn nodes
  [& body]
  [:nodes {} body])

(defn node
  "id should be a string. It will also be used as label."
  [id size r g b]
  [:node {:id id :label id} 
   [:viz:color {:r (str r) :g (str g) :b (str b)}]
   [:viz:size {:value (str size)}] ] )

(defn edges
  [& body]
  [:edges {} body])

(defn edge
  "node1-id and node2-id are strings.  edge-weight should be 
  a number that will determine the edge thickness.  It's not
  a function of the popco link weight, but is not the same thing."
  [node1-id node2-id edge-weight]
  [:edge {:id (str node1-id "<->" node2-id)
          :source node1-id
          :target node2-id
          :weight (str edge-weight)}])

;; IMPORTANT: During import into Gephi, uncheck "auto-scale".  Otherwise it does funny things with node sizes.
(defn gexf-test []
  (gexf-graph
    (nodes
      (node "SALIENT" 50 0 0 255)
      (node "b-what-hey" 40 0 255 0)
      (node "v-yola-boy" 30 255 0 0))
    (edges
      (edge "SALIENT" "b-what-hey" 2.0)
      (edge "SALIENT" "v-yola-boy" 1.0)
      (edge "v-yola-boy" "b-what-hey" 4.0))))
;; LOOKS LIKE GEPHI just makes whatever is the smallest weight into a single-width line.  ugh.  Maybe there's viz:weight attr?




;            <node id="a" label="glossy">
;                <viz:color r="239" g="173" b="66" a="0.6"/>
;                <viz:position x="15.783598" y="40.109245" z="0.0"/>
;                <viz:size value="2.0375757"/>
;                <viz:shape value="disc"/>
;            </node>


;(sexp-as-element [:foo {:foo-attr "foo value"} [:bar {:bar-attr "bar value"} [:baz {} "The baz value"] [:baz {} "another baz value"]]])

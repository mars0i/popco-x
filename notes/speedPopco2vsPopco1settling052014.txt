TIME TRIALS WITH NET UPDATES ONLY, NO COMMUNICATION, MID MAY 2014

I fixed some bugs in popco2 since the April trials, so I'm redoing
the popco2 trials.  The popco1 data below was copied from the April
speed notes file.


===================================================
SUMMARY ON MY MBP

popco2 is slightly more than 10X faster than popco1 with no parallelism
in Clojure (i.e. map rather than pmap) for 1000 ticks, 99 persons, no
communication.  More precisely, the ratio between the popco1 time and
the popco2 criterium average was about 10.2134.


(Note that I only ran popco1 one time, so it's possible that this was
a little bit of an outlier, but SBCL times should be more reliable
than Clojure-without-Criterium.)


===================================================
POPCO 1 ON MBP:

5/12/2014 with crime/crime3example99.lisp
33 both-biasers job, 33 virus-biasers jov, and 33 beast-biaser job:
Using the extremal-numbers git branch: i.e. just like the standard
version, but putting max, min activation at 1.0, -1.0, rather than
0.99, -0.99.

Running popco with maximum of 5 cycles each in 1000 popco tick(s) ....
*do-converse* NIL; *do-update-propn-nets-from-analogy-nets* T; *do-report-to-netlogo* NIL; *do-report-propns-to-csv* NIL; *use-new-random-state* T
1000
Evaluation took:
  1180.224 seconds of real time
  1177.649528 seconds of total run time (1168.861966 user, 8.787562 system)
  [ Run times consist of 64.022 seconds GC time, and 1113.628 seconds non-GC time. ]
  99.78% CPU
  2,714,579,249,652 processor cycles
  5 page faults
  526,989,881,968 bytes consed

[That's 19.62749213 minutes.]

[SBCL didn't go above 200MB, I think.]

[Interestingly(?), this is a little faster than the last time I did a
similar time test, using the 0.99, -0.99 max/min values.  Then the time
was 1209.760389 seconds, or more than 20 mins.]

===================================================
POPCO 2 ON MBP:

git hist id 9cad085
Clojure 1.6.0
java version "1.6.0_65"
Java(TM) SE Runtime Environment (build 1.6.0_65-b14-462-10M4609)
Java HotSpot(TM) 64-Bit Server VM (build 20.65-b04-462, mixed mode)
2GB max heap
(But java only went up to 441.8MB, because I just used nth instead
of trying to collect the entire sequence (which is appropriate for
comparison with popco1).)

SINGLE-THREADED CODE:

The code run:

(use '[criterium.core :only [bench]])
(use 'sims.crime3.example99)
(bench (def _ (nth (unparalleled-many-times popn) 1000)))
[NOTE this uses map rather than pmap]

Criterium's output:

WARNING: Final GC required 4.790693885765076 % of runtime
Evaluation count : 60 in 60 samples of 1 calls.
             Execution time mean : 1.921737 min
    Execution time std-deviation : 753.913115 ms
   Execution time lower quantile : 1.915311 min ( 2.5%)
   Execution time upper quantile : 1.955896 min (97.5%)
                   Overhead used : 2.412322 ns

Found 7 outliers in 60 samples (11.6667 %)
	low-severe	 7 (11.6667 %)
 Variance from outliers : 1.6389 % Variance is slightly inflated by outliers

MULTI-THREADED CODE:

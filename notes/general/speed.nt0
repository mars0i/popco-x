fastest ... slowest

re-splitting matrices each time:
vectorz, persistent-vector, ndarray, clatrix
(the last 2 switch on one case but are close in that case)

fixed split matrices:
vectorz, clatrix, ndarray, persistent-vector

Splitting the matrices is expensive in all implementations, but
the difference isn't so bad in persistent-vector.  In Clatrix the
difference is huge--three orders of magnitude.  Quite large in the
other two implementations, too.   

I wonder whether this has to do with convertion in and out of the
alternative representation.  If you do that for each call on the mapped
function, that could cost alot.  I also emap in other places, but those
are on vectors, so the number of calls to the mapped function is much
smaller.  I wonder how hard it would be to do it a different way.  Send
the function over to the other side, or do the map on a persistent
vector or something and then push the result back over to the other
side.  This last move might be worth doing with clatrix or ndarray
(not with vectorz).
